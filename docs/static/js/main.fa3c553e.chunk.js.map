{"version":3,"sources":["sections/InfraestructuraWeb.js","sections/InfrestructuraDesktop.js","sections/Comenzando.js","sections/FileManager.js","sections/FileManager2.js","sections/DropZoneFile.js","sections/DropZoneFile2.js","sections/Homepage.js","sections/Homepage2.js","sections/Appini.js","App.js","serviceWorker.js","index.js"],"names":["Paragraph","Typography","Title","InfraestructuraWeb","language","style","docco","level","InfraestructuraDesktop","Text","Comenzando","href","code","Column","Table","AdministradorDeArchivos","copyable","dataSource","key","atributo","descripcion","tipo","title","dataIndex","parametro","AdministradorDeArchivos2","DropZoneFile","DropZoneFile2","Homepage2","Appini","SubMenu","Menu","Header","Layout","Content","Sider","App","props","toggleCollapsed","setState","collapsed","state","toggleContent","event","console","log","item","children","length","content","bind","className","trigger","collapsible","this","onCollapse","defaultSelectedKeys","mode","theme","Item","onClick","type","background","padding","span","lineHeight","kay","disabled","Search","placeholder","width","onSearch","value","margin","minHeight","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa3c553e.chunk.js","sourcesContent":["import React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Typography } from 'antd';\nconst { Paragraph, Title } = Typography;\n\nconst codeString = \"+---+ archetype-editor-web\\n\\t|---+ backend\\n\\t\\t|---+ models\\n\\t\\t|---+ public\\n\\t\\t|---+ routes\\n\\t\\t|---+ db.js\\n\\t\\t|---+ index.js\\n\\t|---+ frontend\\n\\t\\t|---+ src\\n\\t\\t\\t|---+ actions\\n\\t\\t\\t|---+ components\\n\\t\\t\\t|---+ store\\n\\t\\t|---+ index.html\\n\\t|---+ .babelrc\\n\\t|---+ .gitignore\\n\\t|---+ package.json\\n\\t|---+ package-lock.json\\n\\t|---+ webpack.config.json\\n\";\n\n\nexport const InfraestructuraWeb = {\n    \"title\": \"Infraestructura Aplicación Web\",\n    \"content\": (\n        <div>\n            \n                <SyntaxHighlighter language=\"javascript\" style={docco}>\n                    <Paragraph>\n                        {\n                            codeString\n                        }\n                    </Paragraph>\n                </SyntaxHighlighter>\n            \n            <Title level={2}>El directorio \"backend\"</Title>\n            <p>En este directorio se encuentran todos los archivos relacionados con el servidor.</p>\n            <Title level={3}>El directorio \"models\"</Title>\n            <p>En este directorio se encuentran todos los archivos relacionados con los modelos de datos, es en cada archivo de este directorio donde se define el schema correspondiente al dato de la DB MongoDB.</p>\n            <Title level={3}>El directorio \"public\"</Title>\n            <p>En este directorio se encuentran todos los archivos públicos del servidor, en este caso aquí se almacena el código compilado a html, css, y js puro.</p>\n            <Title level={3}>El directorio \"routes\"</Title>\n            <p>En este directorio se encuentran todos los archivos relacionados con las rutas para el manejo de peticiones desde la aplicación web/desktop para la interacción con la DB.</p>\n            <Title level={3}>El archivo \"db.js\"</Title>\n            <p>En este archivo se encuentra la conexión a la base de datos MongoDB, mediante mongoose.</p>\n            <Title level={3}>El archivo \"index.js\"</Title>\n            <p>En este archivo se encuentra el código principal que se ejecutará en el servidor, es aquí donde se define el comportamiento lógico del servidor, aquí se inicializa el servidor express y se le asignan los paámetros correspondientes (rutas, etc).</p>\n            <Title level={2}>El directorio \"frontend\"</Title>\n            <p>En este directorio se encuentran todos los archivos relacionados con la aplicación cliente.</p>\n            <Title level={3}>El directorio \"src\"</Title>\n            <p>En este directorio se encuentran los componentes, el store, y las actions correspondientes para el uso de react-redux.</p>\n            <Title level={3}>El archivo \"index.html\"</Title>\n            <p>En este archivo se encuentra el código html principal en donde se monta la aplicación react.</p>   \n        </div>\n        )\n}","import React from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { Typography } from 'antd';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nconst { Paragraph, Title } = Typography;\r\n\r\nconst codeString = \"+---+ archetype-editor-desktop\\n\\t|---+ public\\n\\t\\t|---+ electron.js\\n\\t\\t|---+ index.html\\n\\t|---+ src\\n\\t\\t|---+ actions\\n\\t\\t|---+ components\\n\\t\\t|---+ store\\n\\t|---+ .gitignore\\n\\t|---+ package.json\\n\\t|---+ package-lock.json\\n\";\r\n\r\nexport const InfraestructuraDesktop = {\r\n    \"title\": \"Infraestructura Aplicación Desktop\",\r\n    \"content\": (\r\n        <div>\r\n            <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n                <Paragraph>\r\n                    {\r\n                        codeString\r\n                    }\r\n                </Paragraph>\r\n            </SyntaxHighlighter>            \r\n            <Title level={2}>El directorio \"public\"</Title>\r\n            <p>En este directorio se encuentra el archivo index.html que se monta en la aplicación electron si es que se está en modo producción y el archivo \"electron.js\", que es el clásico \"main.js\" de electron, es decir, el código que define la aplicación electron.</p>\r\n            <Title level={3}>El archivo \"electron.js\"</Title>\r\n            <p>En este archivo se encuentra el codigo de todas las instrucciones basicas que se dan al trabajar el html de la aplicacion (maximizar, minimizar, cerrar, etc). </p>\r\n            <Title level={3}>El archivo \"index.html\"</Title>\r\n            <p>En este archivo se encuentra el código html principal en donde se monta la aplicación react.</p>\r\n            <Title level={2}>El directorio \"src\"</Title>\r\n            <p>En este directorio se encuentran los componentes, el store, y las actions correspondientes para el uso de react-redux.</p>\r\n            <Title level={2}>El directorio \"src\"</Title>\r\n            <p>En este directorio se encuentran los componentes, el store, y las actions correspondientes para el uso de react-redux.</p>\r\n            \r\n        </div>\r\n        )\r\n}","import React from 'react';\nimport { Typography } from 'antd';\nconst { Paragraph, Title, Text } = Typography;\n\nexport const Comenzando = {\n    \"title\": \"Comenzando\",\n    \"content\": (\n        <div>\n            <Title level={2}>Pre-Requisitos</Title>\n            <Paragraph>\n                Primero es necesario tener instalado NodeJS en el equipo, para esto se descarga mediante el sitio web oficial:\n            </Paragraph>\n            <a href=\"https://nodejs.org/es/\">NodeJS.</a>\n            <Paragraph>\n                También es necesario tener instalado MongoDB en el equipo, para esto se descarga mediante el sitio web oficial:\n            </Paragraph>\n            <a href=\"https://www.mongodb.com/es\">MongoDB.</a>\n            <Paragraph>\n                Y se debe tener en ejecución el servidor MongoDB.\n            </Paragraph>\n            <Title level={2}>Instalación y Comandos básicos</Title>\n            <Paragraph>\n                Primero se debe hubicar una consola o terminal en el directorio del proyecto (la aplicación web está en un directorio separado de la aplicación de escritorio), luego se debe acceder por separado a cada directorio y ejecutar el siguiente comando:\n            </Paragraph>\n            <Text code>npm install</Text>\n            <Paragraph>\n                Luego, para el caso de la aplicación web se debe ejecutar el siguiente comando para poner en marcha tanto el servidor de desarrollo de react como el servidor express (NodeJS) que recibe las peticiones de la aplicación web:\n            </Paragraph>\n            <Text code>npm run dev</Text>\n            <Paragraph>\n                El siguiente comando en la aplicación web realiza el traspaso de código en lenguaje jsx a javascript puro mediante webpack:\n            </Paragraph>\n            <Text code>npm run build</Text>\n            <Paragraph>\n                Este comando posiciona el código de salida en el directorio del cual el servidor Express carga dicho archivo (esto es más que nada para la etapa de producción).\n            </Paragraph>\n            <Paragraph>\n                El siguiente comando en la aplicación web ejecuta el servidor Express en modo de producción:\n            </Paragraph>\n            <Text code>npm start</Text>\n            <Paragraph>\n                Ahora para el caso de la aplicación de escritorio, se describen los siguientes comandos:\n            </Paragraph>\n            <Text code>npm start</Text>\n            <Paragraph>\n                Este comando pone en marcha el servidor de desarrollo para el ambiente de ReactJS.\n            </Paragraph>\n            <Text code>npm run build</Text>\n            <Paragraph>\n                Este comando genera el código javascript puro en base al código ReactJS.\n            </Paragraph>\n            <Text code>npm run electron-dev</Text>\n            <Paragraph>\n                Este comando es el que ejecuta tanto el entorno de desarrollo de ReactJS como la aplicación ElectronJS.\n            </Paragraph>\n            <Text code>npm run pack</Text>\n            <Paragraph>\n                Este comando empaqueta la aplicación ElectronJS.\n            </Paragraph>\n            <Text code>npm run dist</Text>\n            <Paragraph>\n                Finalmente este comando genera el instalador de la apliación ElectronJS.\n            </Paragraph>\n        </div>\n        )\n}","import React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Typography, Table } from 'antd';\nconst { Paragraph, Title } = Typography;\nconst { Column } = Table;\nconst codeString = \"import React, { Component } from 'react';\\nimport { connect } from 'react-redux';\\nimport { toggleFile, onEdit, changeName, removeFile } from '../actions/FileManager';\\nimport { handlerDownload } from '../actions/home';\\nimport { Tabs, Icon, Typography, Modal } from 'antd';\\nimport './FileManager.css';\\nconst { TabPane } = Tabs;\\nconst { Paragraph } = Typography;\\nconst { confirm } = Modal;\\nclass FileManager extends Component {\\n\\trender(){\\n\\t\\treturn (\\n\\t\\t\\t<div className='file-manager'>\\n\\t\\t\\t\\t<Tabs\\n\\t\\t\\t\\t\\tonChange={this.props.handlerToggle}\\n\\t\\t\\t\\t\\tactiveKey={this.props.currentFile}\\n\\t\\t\\t\\t\\ttype='editable-card'\\n\\t\\t\\t\\t\\tonEdit={this.props.handlerEdit}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t{this.props.files.map((pane, indx) => (\\n\\t\\t\\t\\t\\t\\t<TabPane className='tab-content' tab={\\n\\t\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Paragraph className='display-inline' editable={{ onChange: str=>{this.props.handlerChangeName(str, pane.key, indx, this)} }}>{pane.title}\\n\\t\\t\\t\\t\\t\\t\\t\\t</Paragraph>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Icon type='close' className='close' onClick={(e)=>{this.props.showConfirm(e, this.props.currentFile, this.props.files)}}/>\\n\\t\\t\\t\\t\\t\\t\\t</div>} key={pane.key}>\\n\\t\\t\\t\\t\\t\\t\\t{pane.content}\\n\\t\\t\\t\\t\\t\\t</TabPane>\\n\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t</Tabs>\\n\\t\\t\\t</div>\\n\\t\\t);\\n\\t}\\n}\\nconst mapStateToProps = state => {\\n\\treturn {\\n\\t\\tnewTabIndex: state.newTabIndex,\\n\\t\\tfiles: state.files,\\n\\t\\tcurrentFile: state.currentFile\\n\\t};\\n}\\nconst mapDispatchToProps = dispatch => {\\n\\treturn {\\n\\t\\thandlerToggle(activeKey) {\\n\\t\\t\\tdispatch(toggleFile(activeKey));\\n\\t\\t},\\n\\t\\thandlerEdit(targetKey, action){\\n\\t\\t\\tdispatch(onEdit(action));\\n\\t\\t},\\n\\t\\thandlerChangeName(newName, key, indx, tab){\\n\\t\\t\\tdispatch(changeName(newName, key, indx));\\n\\t\\t\\ttab.forceUpdate();\\n\\t\\t},\\n\\t\\tshowConfirm(e, key, files) {\\n\\t\\t\\tconfirm({\\n\\t\\t\\t\\ttitle: 'Cuidado!',\\n\\t\\t\\t\\tcontent: 'Haz realizado cambios en el archivo, ¿Deseas descargar el archivo antes de cerrarlo?',\\n\\t\\t\\t\\tonOk() {\\n\\t\\t\\t\\t\\tconst fileTarget = files.filter(ofile => ofile.key === key)[0];\\n\\t\\t\\t\\t\\tif(fileTarget && fileTarget.saved === false){\\n\\t\\t\\t\\t\\t\\thandlerDownload(dispatch, key, files);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdispatch(removeFile(key));\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tonCancel() {dispatch(removeFile(key));},\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n}\\nexport default connect(mapStateToProps, mapDispatchToProps)(FileManager);\";\nconst tablaShowConfirm = [\n    {\n      key: '1',\n      parametro: 'e',\n      descripcion: 'evento.',\n      tipo: 'evento',\n    },\n    {\n        key: '2',\n        parametro: 'key',\n        descripcion: 'La key correspondiente al archivo correspondiente.',\n        tipo: 'String',\n      },\n      {\n        key: '3',\n        parametro: 'files',\n        descripcion: 'El arreglo que contiene los archivos en uso.',\n        tipo: 'Array',\n      },\n  ];\n\nconst tablaHandlerChangeName = [\n    {\n      key: '1',\n      parametro: 'newName',\n      descripcion: 'Nuevo nombre para el archivo (obtenido al editar el texto de la pestaña del archivo en cuestión).',\n      tipo: 'String',\n    },\n    {\n        key: '2',\n        parametro: 'key',\n        descripcion: 'La key correspondiente al archivo correspondiente.',\n        tipo: 'String',\n      },\n      {\n        key: '3',\n        parametro: 'indx',\n        descripcion: 'El índice del archivo en el arreglo de archivos.',\n        tipo: 'Número',\n      },\n      {\n        key: '4',\n        parametro: 'tab',\n        descripcion: 'El objeto FileManager en sí, para actualizar la interfaz al cambiar el nombre.',\n        tipo: 'Component',\n      },\n  ];\n\n  const tablaHandlerEdit = [\n    {\n      key: '1',\n      parametro: 'targetKey',\n      descripcion: 'La key correspondiente al archivo en el que se ejecutará la acción.',\n      tipo: 'String',\n    },\n    {\n        key: '2',\n        parametro: 'action',\n        descripcion: 'acción devuelta por el componenete de ant design (add, remove, etc)',\n        tipo: 'String',\n      }\n  ];\nconst tablaHandlerToggle = [\n    {\n      key: '1',\n      parametro: 'activeKey',\n      descripcion: 'La key correspondiente al archivo que se mostrará (pestaña).',\n      tipo: 'String',\n    }\n  ];\n\nconst tablaFileManager = [\n    {\n      key: '1',\n      atributo: 'newTabIndex',\n      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',\n      tipo: 'Número',\n    },{\n        key: '2',\n        atributo: 'files',\n        descripcion: 'El arreglo que contiene los archivos en uso.',\n        tipo: 'Array',\n    },{\n        key: '3',\n        atributo: 'currentFile',\n        descripcion: 'La key correspondiente al archivo actual (el que se está visualizando, cuando no hay archivos abiertos, este valor es null).',\n        tipo: 'String',\n    }\n  ];\n\n\nexport const AdministradorDeArchivos = {\n    \"title\": \"Administrador de archivos\",\n    \"content\": (\n        <div>\n            <Title level={2}>El componenete \"FileManager\".</Title>\n            <SyntaxHighlighter language=\"javascript\" style={docco}>\n                    <Paragraph copyable>\n                        {\n                            codeString\n                        }\n                    </Paragraph>\n                </SyntaxHighlighter>\n            <Table dataSource={tablaFileManager}>\n                <Column title=\"Atributo\" dataIndex=\"atributo\" />\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\n                <Column title=\"Tipo\" dataIndex=\"tipo\" />\n            </Table>\n            <Title level={4}>La función \"map\" .</Title>\n            <p>La función \"map\" itera el arreglo de archivos global definido en el store.js para generar una pestaña por cada archivo en uso.</p>\n            <Title level={4}>La función \"mapStateToProps\" .</Title>\n            <p>La función \"mapStateToProps\" es la que como dice su nombre, mapea el estado del store.js como propiedad de la clase \"FileManager\" (ver documentación de redux y react-redux para más información).</p>\n            <Title level={4}>La función \"mapDispatchToProps\" .</Title>\n            <p>La función \"mapDispatchToProps\" es la que como dice su nombre, mapea el despacho (dispatch) de acciones (actions) que son cargadas desde \"actions/[component].js\" (Es esta la que despacha la acción con el objeto con el respectivo \"type\" y \"datos\" necesarios, enviando este objeto al reducer ubicado en \"store.js\" que ejecuta una acción para actualizar el estado global de la aplicación dependiendo del type de la acción) como propiedad de la clase \"FileManager\" (ver documentación de redux y react-redux para más información).</p>\n            <Title level={2}>La función \"handlerToggle\" .</Title>\n            <Table dataSource={tablaHandlerToggle}>\n                <Column title=\"Parametro\" dataIndex=\"parametro\" />\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\n                <Column title=\"Tipo\" dataIndex=\"tipo\" />\n            </Table>\n            <Title level={2}>La función \"handlerEdit\" .</Title>\n            <Table dataSource={tablaHandlerEdit}>\n                <Column title=\"Parametro\" dataIndex=\"parametro\" />\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\n                <Column title=\"Tipo\" dataIndex=\"tipo\" />\n            </Table>\n            <Title level={2}>La función \"handlerChangeName\" .</Title>\n            <Table dataSource={tablaHandlerChangeName}>\n                <Column title=\"Parametro\" dataIndex=\"parametro\" />\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\n                <Column title=\"Tipo\" dataIndex=\"tipo\" />\n            </Table>\n            <Title level={2}>La función \"showConfirm\" .</Title>\n            <Table dataSource={tablaShowConfirm}>\n                <Column title=\"Parametro\" dataIndex=\"parametro\" />\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\n                <Column title=\"Tipo\" dataIndex=\"tipo\" />\n            </Table>\n        </div>\n        )\n}","import React from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport { Typography, Table } from 'antd';\r\nconst { Paragraph, Title } = Typography;\r\nconst { Column } = Table;\r\nconst codeString = \"import React from 'react';\\n\\nconst toggleFile = activeKey => {\\n\\treturn {\\n\\t\\ttype: 'toggleFile',\\n\\t\\tcurrentFile: activeKey\\n\\t};\\n};\\n\\nconst onEdit = (action) => {\\n\\tif(action === 'add'){\\n\\t\\treturn {\\n\\t\\t\\ttype: 'addFile',\\n\\t\\t\\tfile: { title: 'Nuevo archivo', content: {\\n\\t\\t\\t\\tadl_version: ' '',\\n\\t\\t\\t\\tarchetype_id: {value: 'Nuevo archivo'},\\n\\t\\t\\t\\tconcept: ' '',\\n\\t\\t\\t\\tdefinition: {\\n\\t\\t\\t\\t\\tattributes: [],\\n\\t\\t\\t\\t\\tnode_id: ' '',\\n\\t\\t\\t\\t\\toccurrences: {\\n\\t\\t\\t\\t\\t\\tlower: ' '',\\n\\t\\t\\t\\t\\t\\tlower_included: ' '',\\n\\t\\t\\t\\t\\t\\tlower_unbounded: ' ',\\n\\t\\t\\t\\t\\t\\tupper: ' ',\\n\\t\\t\\t\\t\\t\\tupper_included: ' ',\\n\\t\\t\\t\\t\\t\\tupper_unbounded: ' '\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\trm_type_name: ' '\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tdescription: {\\n\\t\\t\\t\\t\\tdetails: {\\n\\t\\t\\t\\t\\t\\tcopyright: ' ',\\n\\t\\t\\t\\t\\t\\tkeywords: ' ',\\n\\t\\t\\t\\t\\t\\tlanguage: {\\n\\t\\t\\t\\t\\t\\tcode_string: ' ',\\n\\t\\t\\t\\t\\t\\t\\tterminology_id: {\\n\\t\\t\\t\\t\\t\\t\\tvalue: ' '\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\tmisuse: ' ',\\n\\t\\t\\t\\t\\t\\tpurpose: ' ',\\n\\t\\t\\t\\t\\t\\tuse: ' '\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\tlifecycle_state: ' ',\\n\\t\\t\\t\\t\\toriginal_author: [],\\n\\t\\t\\t\\t\\tother_contribuitors: [],\\n\\t\\t\\t\\t\\tother_details: []\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tis_controlled: ' ',\\n\\t\\t\\t\\tontology: {\\n\\t\\t\\t\\t\\tterm_definitions: {\\n\\t\\t\\t\\t\\t\\titems: []\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\toriginal_language: {\\n\\t\\t\\t\\t\\tcode_string: ' ',\\n\\t\\t\\t\\t\\tterminology_id: {\\n\\t\\t\\t\\t\\t\\tvalue: ' '\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\ttranslations: [],\\n\\t\\t\\t\\tuid: {\\n\\t\\t\\t\\t\\tvalue: ' '\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, saved: false, key: '0', _id: '' ,\\n\\t\\t\\tallList: [\\n\\t\\t\\t\\t{id:'Lista1',lista:[],type:'State'},\\n\\t\\t\\t\\t{id:'Lista2',lista:[],type:'Protocol'},\\n\\t\\t\\t\\t{id:'Lista3',lista:[],type:'Data'},\\n\\t\\t\\t\\t{id:'Lista4',lista:[],type:'Events'},\\n\\t\\t\\t\\t{id:'Lista5',lista:[],type:'Description'},\\n\\t\\t\\t\\t{id:'Lista6',lista:[],type:'Atributtion'}\\n\\n\\t\\t\\t]}\\n\\t\\t};\\n\\t}\\n\\n};\\n\\nconst changeName = (newName, key, indx) => {\\n\\treturn {\\n\\t\\ttype: 'changeFilename',\\n\\t\\tkey,\\n\\t\\tindx,\\n\\t\\tnewName\\n\\t};\\n};\\n\\nconst removeFile = key => {\\n\\treturn {\\n\\ttype: 'removeFile',\\n\\t\\ttarget: key\\n\\t\\t\\t\\t};\\n}\\n\\nconst updateblocklist = (blocklist) =>{\\n\\treturn {\\n\\ttype: 'updateblocklist', \\n\\t\\tblocklist\\n\\t}\\n}\\nexport { toggleFile, onEdit, changeName, removeFile, updateblocklist };\";\r\n\r\n\r\nconst Tablaupdateblocklist = [\r\n    {\r\n      key: '1',\r\n      atributo: 'blocklist',\r\n      descripcion: 'La lista de bloques existentes es el parametro utilizado para que cuando se elimine algun archivo se pueda reorganizar.',\r\n      tipo: 'String',\r\n    }\r\n  ];\r\n\r\n  const TablaremoveFile = [\r\n    {\r\n      key: '1',\r\n      atributo: 'Key',\r\n      descripcion: 'Realiza utilización de la \"key\" para eliminar el archivo correcto.',\r\n      tipo: 'String',\r\n    }\r\n  ];\r\nconst TablachangeName = [\r\n    {\r\n      key: '1',\r\n      atributo: 'newName',\r\n      descripcion: 'Es el nombre que le asignará al nuevo archivo temporalmete hasta que el usuario lo cambie, este nombre va acompañado de una key.',\r\n      tipo: 'String',\r\n    },{\r\n        key: '2',\r\n        atributo: 'key',\r\n        descripcion: '\"key\" es la clave que tendra cada archivo creado y su funcion es diferenciar cada nombre de archivo creado, sin que se repita.',\r\n        tipo: 'String',\r\n      }\r\n  ];\r\n\r\nconst TablatoggleFile = [\r\n    {\r\n      key: '1',\r\n      atributo: 'activeKey',\r\n      descripcion: 'La key correspondiente al archivo que se mostrará (pestaña).',\r\n      tipo: 'String',\r\n    }\r\n  ];\r\n  const TablaonEdit = [\r\n    {\r\n      key: '1',\r\n      atributo: 'action',\r\n      descripcion: 'Es el parámetro recibido al presionar la opción de nuevo archivo',\r\n      tipo: 'String',\r\n    }\r\n  ];\r\n\r\n\r\nexport const AdministradorDeArchivos2 = {\r\n    \"title\": \"Administrador de archivos\",\r\n    \"content\": (\r\n        <div>\r\n            <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n                    <Paragraph copyable>\r\n                        {\r\n                            codeString\r\n                        }\r\n                    </Paragraph>\r\n                </SyntaxHighlighter>\r\n            <Title level={2}>En la funcion \"toggleFile\".</Title>\r\n            <Table dataSource={TablatoggleFile}>\r\n                <Column title=\"Parametro\" dataIndex=\"atributo\" />\r\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\r\n            </Table>\r\n            <Title level={4}>La función \"onEdit\" .</Title>\r\n            <p>La función \"onEdit\" crea la estructura del archivo json cada vez que uno crea un nuevo archivo de tal manera que uno podrá trabajar en esta area ya teniendo la estructura armada.</p>\r\n            <Table dataSource={TablaonEdit}>\r\n                <Column title=\"Parametro\" dataIndex=\"atributo\" />\r\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\r\n            </Table>\r\n            <Title level={4}>La función \"changeName\" .</Title>\r\n            <p>La función \"changeName\" busca un nombre para la creacion de este nuevo archivo.</p>\r\n            <Table dataSource={TablachangeName}>\r\n                <Column title=\"Parametro\" dataIndex=\"atributo\" />\r\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\r\n            </Table>\r\n            <Title level={4}>La función \"removeFile\" .</Title>\r\n            <p>La función \"removeFile\" es utilizada para eliminar un nuevo archivo, este hace uso de la \"key\" de tal modo de que el archivo eliminado sea el correcto.</p>\r\n            <Table dataSource={TablaremoveFile}>\r\n                <Column title=\"Parametro\" dataIndex=\"atributo\" />\r\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\r\n            </Table>\r\n            <Title level={2}>La función \"updateblocklist\" .</Title>\r\n            <p>La función \"updateblocklist\" es la utilizada para actualizar las pestañas abiertas en ese momento ya sea que se agrega o se elimina una.</p>\r\n            <Table dataSource={Tablaupdateblocklist}>\r\n                <Column title=\"Parametro\" dataIndex=\"atributo\" />\r\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\r\n            </Table>   \r\n        </div>\r\n        )\r\n}","import React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Typography, Table } from 'antd';\nconst { Paragraph, Title } = Typography;\nconst { Column } = Table;\nconst codeString = \"import React, { Component } from 'react'\\nimport { connect } from 'react-redux';\\nimport { openFile } from '../actions/DropZoneFile';\\nimport { toggleOpenFileDialog } from '../actions/home';\\nimport { feedBackMessage } from '../actions/others';\\nimport { Icon, message } from 'antd';\\nimport './DropZoneFile.css'\\nclass Dropzone extends Component {\\n\\tconstructor(props) {\\n\\t\\tsuper(props);\\n\\t\\tthis.state = { hover: false };\\n\\t\\tthis.fileInputRef = React.createRef();\\n\\t\\tthis.openFileDialog = this.openFileDialog.bind(this);\\n\\t\\tthis.onFilesAdded = this.onFilesAdded.bind(this);\\n\\t\\tthis.onDragOver = this.onDragOver.bind(this);\\n\\t\\tthis.onDragLeave = this.onDragLeave.bind(this);\\n\\t\\tthis.onDrop = this.onDrop.bind(this)\\n\\t}\\n\\topenFileDialog() {\\n\\t\\tif (this.props.disabled) return;\\n\\t\\tthis.fileInputRef.current.click();\\n\\t}\\n\\tonFilesAdded(evt) {\\n\\t\\tif (this.props.disabled) return;\\n\\t\\tconst files = evt.target.files;\\n\\t\\tconst aFiles = this.fileListToArray(files);\\n\\t\\tif(aFiles.length > 0){\\n\\t\\t\\tthis.props.handlerAddFiles(aFiles, this.props.newTabIndex, this.props.files, this.fileInputRef);\\n\\t\\t}\\n\\t}\\n\\tonDragOver(evt) {\\n\\t\\tevt.preventDefault();\\n\\t\\tif (this.props.disabled) return;\\n\\t\\tthis.setState({ hover: true });\\n\\t}\\n\\tonDragLeave() {\\n\\t\\tthis.setState({ hover: false });\\n\\t}\\n\\tonDrop(event) {\\n\\t\\tevent.preventDefault();\\n\\t\\tif (this.props.disabled) return;\\n\\t\\tconst files = event.dataTransfer.files;\\n\\t\\tconst aFiles = this.fileListToArray(files);\\n\\t\\tif(aFiles.length > 0){\\n\\t\\t\\tthis.props.handlerAddFiles(aFiles, this.props.newTabIndex, this.props.files, this.fileInputRef);\\n\\t\\t}\\n\\t\\tthis.setState({ hover: false });\\n\\t}\\n\\tfileListToArray(list) {\\n\\t\\tconst array = [];\\n\\t\\tfor (var i = 0; i < list.length; i++) {\\n\\t\\t\\tarray.push(list.item(i));\\n\\t\\t}\\n\\t\\treturn array;\\n\\t}\\n\\trender() {\\n\\t\\treturn (\\n\\t\\t\\t<div\\n\\t\\t\\t\\tclassName={`Dropzone ${this.state.hover ? 'hover' : ''}`}\\n\\t\\t\\t\\tonDragOver={this.onDragOver}\\n\\t\\t\\t\\tonDragLeave={this.onDragLeave}\\n\\t\\t\\t\\tonDrop={this.onDrop}\\n\\t\\t\\t\\tonClick={this.openFileDialog}\\n\\t\\t\\t\\tstyle={{ cursor: this.props.disabled ? 'default' : 'pointer' }}\\n\\t\\t\\t>\\n\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\tref={this.fileInputRef}\\n\\t\\t\\t\\t\\tclassName='FileInput'\\n\\t\\t\\t\\t\\ttype='file'\\n\\t\\t\\t\\t\\taccept='.json, .xml, .adl'\\n\\t\\t\\t\\t\\tmultiple\\n\\t\\t\\t\\t\\tonChange={this.onFilesAdded}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<Icon type='inbox' />\\n\\t\\t\\t\\t<span>Haz click o arrastra archivos a esta área para abrirlos</span>\\n\\t\\t\\t</div>\\n\\t\\t)\\n\\t}\\n}\\nconst mapStateToProps = state => {\\n\\treturn{\\n\\t\\tnewTabIndex: state.newTabIndex,\\n\\t\\tfiles: state.files\\n\\t};\\n}\\nconst mapDispatchToProps = dispatch => {\\n\\treturn {\\n\\t\\thandlerAddFiles(aFiles, newTabIndex, files, ref) {\\n\\t\\t\\tif (window.FileReader) {\\n\\t\\t\\taFiles.forEach(file => {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tconst ext = file.name.split('.').pop();\\n\\t\\t\\t\\t\\tif (ext === 'adl' || ext === 'json' || ext === 'xml' ) {\\n\\t\\t\\t\\t\\t\\tconst equalFiles = files.filter(ofile => ofile.title === file.name);\\n\\t\\t\\t\\t\\t\\tif (equalFiles.length <= 0) {\\n\\t\\t\\t\\t\\t\\tconst reader = new FileReader();\\n\\t\\t\\t\\t\\t\\tconst nFile = { title: '', content: '', saved: false, key: '0' };\\n\\t\\t\\t\\t\\t\\tnFile.key = (newTabIndex + 1).toString();\\n\\t\\t\\t\\t\\t\\tnewTabIndex+=1;\\n\\t\\t\\t\\t\\t\\tnFile.title = file.name;\\n\\t\\t\\t\\t\\t\\treader.onload = (r)=>{\\n\\t\\t\\t\\t\\t\\t\\tnFile.content = r.target.result;\\n\\t\\t\\t\\t\\t\\t\\tfiles = files.concat(nFile);\\n\\t\\t\\t\\t\\t\\t\\tdispatch(openFile(files, newTabIndex));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\treader.readAsText(file, 'UTF-8');\\n\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'success', msg: 'El archivo ' + file.name + ' se cargó correctamente.'});\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'warning', msg: 'El archivo ' + file.name + ' no se cargó debido a que ya se encuentra en uso.'});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'El archivo ' + file.name + ' no se pudo cargar.'});\\n\\t\\t\\t\\t\\t\\tconsole.log(error);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tref.current.value = null;\\n\\t\\t\\t\\tdispatch(toggleOpenFileDialog(false));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropzone);\";\nconst tablahandlerAddFiles = [\n    {\n      key: '1',\n      parametro: 'aFiles',\n      descripcion: 'Arreglo de objetos json con los datos de cada archivo seleccionado para cargar.',\n      tipo: 'Array',\n    },\n    {\n      key: '2',\n      parametro: 'newTabIndex',\n      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',\n      tipo: 'Número',\n    },\n    {\n      key: '3',\n      parametro: 'files',\n      descripcion: 'El arreglo que contiene los archivos en uso.',\n      tipo: 'Array',\n    },\n    {\n      key: '4',\n      parametro: 'ref',\n      descripcion: 'Referencia React al <input />.',\n      tipo: 'Referencia React',\n    }\n];\nconst tablaDropZoneFile = [\n    {\n      key: '1',\n      atributo: 'newTabIndex',\n      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',\n      tipo: 'Número',\n    },{\n        key: '2',\n        atributo: 'files',\n        descripcion: 'El arreglo que contiene los archivos en uso.',\n        tipo: 'Array',\n    }\n];\nexport const DropZoneFile = {\n    \"title\": \"Cargador de archivos\",\n    \"content\": (\n        <div>\n            <Title level={2}>El componenete \"DropZoneFile\".</Title>\n            <SyntaxHighlighter language=\"javascript\" style={docco}>\n                    <Paragraph copyable>\n                        {\n                            codeString\n                        }\n                    </Paragraph>\n                </SyntaxHighlighter>\n            <Table dataSource={tablaDropZoneFile}>\n                <Column title=\"Atributo\" dataIndex=\"atributo\" />\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\n                <Column title=\"Tipo\" dataIndex=\"tipo\" />\n            </Table>\n            <Title level={4}>La función \"mapStateToProps\" .</Title>\n            <p>La función \"mapStateToProps\" es la que como dice su nombre, mapea el estado del store.js como propiedad de la clase \"FileManager\" (ver documentación de redux y react-redux para más información).</p>\n            <Title level={4}>La función \"mapDispatchToProps\" .</Title>\n            <p>La función \"mapDispatchToProps\" es la que como dice su nombre, mapea el despacho (dispatch) de acciones (actions) que son cargadas desde \"actions/[component].js\" (Es esta la que despacha la acción con el objeto con el respectivo \"type\" y \"datos\" necesarios, enviando este objeto al reducer ubicado en \"store.js\" que ejecuta una acción para actualizar el estado global de la aplicación dependiendo del type de la acción) como propiedad de la clase \"FileManager\" (ver documentación de redux y react-redux para más información).</p>\n            <Title level={2}>La función \"handlerAddFiles\" .</Title>\n            <p>\n              Esta función es la encargada de analizar el arreglo de los archivos seleccionados por el usuario para\n              para luego agregarlos uno por uno al estado global de la aplicación (store), mediante el despacho de la acción\n              \"openFile\".\n            </p>\n            <Table dataSource={tablahandlerAddFiles}>\n                <Column title=\"Parametro\" dataIndex=\"parametro\" />\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\n                <Column title=\"Tipo\" dataIndex=\"tipo\" />\n            </Table>\n        </div>\n        )\n}","import React from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport { Typography, Table } from 'antd';\r\nconst { Paragraph, Title } = Typography;\r\nconst { Column } = Table;\r\nconst codeString = \"const openFile = (files, newTabIndex) => {\\n\\treturn {\\n\\t\\ttype: 'openFile',\\n\\t\\tfiles,\\n\\t\\tnewTabIndex\\n\\t};\\n};\\nexport { openFile };\";\r\n\r\nconst tablaDropZoneFile = [\r\n    {\r\n      key: '1',\r\n      atributo: 'newTabIndex',\r\n      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',\r\n      tipo: 'Número',\r\n    },{\r\n        key: '2',\r\n        atributo: 'files',\r\n        descripcion: 'El arreglo que contiene los archivos en uso.',\r\n        tipo: 'Array',\r\n    }\r\n];\r\nexport const DropZoneFile2 = {\r\n    \"title\": \"Cargador de archivos\",\r\n    \"content\": (\r\n        <div>\r\n            <Title level={2}>La funcion \"openFile\".</Title>\r\n            <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n                    <Paragraph copyable>\r\n                        {\r\n                            codeString\r\n                        }\r\n                    </Paragraph>\r\n                </SyntaxHighlighter>\r\n            <Table dataSource={tablaDropZoneFile}>\r\n                <Column title=\"Atributo\" dataIndex=\"atributo\" />\r\n                <Column title=\"Descripción\" dataIndex=\"descripcion\" />\r\n                <Column title=\"Tipo\" dataIndex=\"tipo\" />\r\n            </Table>\r\n           \r\n        </div>\r\n        )\r\n}","import React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Typography, Table } from 'antd';\nconst { Paragraph, Title } = Typography;\nconst { Column } = Table;\nconst codeString = \"import React, { Component } from 'react'; \\nimport { connect } from 'react-redux';\\nimport { changeTitle, toggleOpenFileDialog, handlerDownload, handlerSaveAs } from '../actions/home';\\nimport FileManager from './FileManager';\\nimport { onEdit } from '../actions/FileManager';\\nimport DropZone from './DropZoneFile';\\nimport { Button, Layout, Menu, Icon, Dropdown, Modal, Row } from 'antd';\\nimport './home.css';\\nimport ButtonGroup from 'antd/lib/button/button-group';\\nconst { SubMenu } = Menu;\\nconst { Content, Footer, Sider} = Layout;\\nvar Maximize=true;\\nclass Home extends Component {\\n\\tconstructor(props){\\n\\t\\tsuper(props);\\n\\t\\tthis.toggle = this.toggle.bind(this);\\n\\t\\tthis.handlerWindowClose = this.handlerWindowClose.bind(this);\\n\\t\\tthis.handlerWindowMinimize = this.handlerWindowMinimize.bind(this);\\n\\t\\tthis.handlerWindowMaximize = this.handlerWindowMaximize.bind(this);\\n\\t\\tthis.handlerWindowRestore = this.handlerWindowRestore.bind(this);\\n\\t\\tthis.state = {collapsed:false};\\n\\t\\tthis.MenuFile = this.MenuFile.bind(this);\\n\\t\\tthis.MenuHelp = this.MenuHelp.bind(this);\\n\\t\\tthis.MenuEdit = this.MenuEdit.bind(this);\\n\\t\\tthis.MenuSelection = this.MenuSelection.bind(this);\\n\\t}\\n\\tMenuFile() {\\n\\t\\treturn(<Menu theme='light'>\\n\\t\\t\\t<Menu.Item key='nwfile' onClick={this.props.handlerAdd}><Icon type='file' /> Nuevo Archivo</Menu.Item>\\n\\t\\t\\t<Menu.Item key='opfile' onClick={() => this.props.handlerDialogOpenFile(true)}>\\n\\t\\t\\t\\t<Icon type='upload' /> Abrir archivo\\n\\t\\t\\t</Menu.Item>\\n\\t\\t\\t<Menu.Item key='svsave' onClick={()=>{this.props.handlerDownloadFile(this.props.electron.ipcRenderer, this.props.currentFile, this.props.files)}}>\\n\\t\\t\\t\\t<Icon type='download' /> Guardar Archivo\\n\\t\\t\\t</Menu.Item>\\n\\t\\t\\t<Menu.Item key='svsaveas' onClick={()=>{this.props.handlerSaveAsFile(this.props.electron.ipcRenderer, this.props.currentFile, this.props.files)}}>\\n\\t\\t\\t\\t<Icon type='download' /> Guardar Como...\\n\\t\\t\\t</Menu.Item>\\n\\t\\t\\t<Menu.Item key='quit' onClick={this.handlerWindowClose}>Salir</Menu.Item>\\n\\t\\t</Menu>);\\n\\t}\\n\\tMenuEdit(){\\n\\t\\treturn(<Menu theme='light'>\\n\\t\\t\\t<Menu.Item key='undo'>Deshacer</Menu.Item>\\n\\t\\t\\t<Menu.Item key='redo'>Rehacer</Menu.Item>\\n\\t\\t\\t<Menu.Item key='cut'>Cortar</Menu.Item>\\n\\t\\t\\t<Menu.Item key='copy'>Copiar</Menu.Item>\\n\\t\\t\\t<Menu.Item key='paste'>Pegar</Menu.Item>\\n\\t\\t</Menu>);\\n\\t}\\n\\tMenuSelection(){\\n\\t\\treturn(<Menu theme='light'>\\n\\t\\t\\t<Menu.Item key='slc'>Seleccionar todo</Menu.Item>\\n\\t\\t</Menu>);\\n\\t}\\n\\tMenuHelp(){\\n\\t\\treturn(<Menu theme='light'>\\n\\t\\t\\t<Menu.Item key='docu'>Documentation</Menu.Item>\\n\\t\\t\\t<Menu.Item key='about'>Acerca de Editor de Arquetipos</Menu.Item>\\n\\t\\t</Menu>);\\n\\t}\\n\\thandlerWindowMinimize(event) {\\n\\t\\tevent.preventDefault();\\n\\t\\tconst { ipcRenderer } = this.props.electron;\\n\\t\\tipcRenderer.send('mainWindow:minimize');\\n\\t\\tevent.stopPropagation();\\n\\t}\\n\\thandlerWindowClose(event) {\\n\\t\\tif (event.key && event.key !== 'quit') {\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\tevent.stopPropagation();\\n\\t\\t}\\n\\t\\tconst { ipcRenderer } = this.props.electron;\\n\\t\\tipcRenderer.send('mainWindow:close');\\n\\t}\\n\\thandlerWindowMaximize(event) {\\n\\t\\tevent.preventDefault();\\n\\t\\tconst { ipcRenderer } = this.props.electron;\\n\\t\\tipcRenderer.send('mainWindow:maximize');\\n\\t\\tif(Maximize===true){\\n\\t\\t\\tMaximize=false;\\n\\t\\t\\tconsole.log(Maximize);\\n\\t\\t}\\n\\t\\tevent.stopPropagation();\\n\\t}\\n\\thandlerWindowRestore(event) {\\n\\t\\tevent.preventDefault();\\n\\t\\tconst { ipcRenderer } = this.props.electron;\\n\\t\\tipcRenderer.send('mainWindow:restore');\\n\\t\\tif(Maximize===false){\\n\\t\\t\\tMaximize=true;\\n\\t\\t\\tconsole.log(Maximize);\\n\\t\\t}\\n\\t\\tevent.stopPropagation();\\n\\t}\\n\\ttoggle() {\\n\\t\\tthis.setState(state => ({ collapse: !state.collapse }));\\n\\t}\\n\\trender(){\\n\\t\\treturn (\\n\\t\\t\\t<div >\\n\\t\\t\\t\\t<Modal\\n\\t\\t\\t\\t\\ttitle='Abrir Archivo'\\n\\t\\t\\t\\t\\tcentered\\n\\t\\t\\t\\t\\tvisible={this.props.dialogOpenFile}\\n\\t\\t\\t\\t\\tonOk={() => this.props.handlerDialogOpenFile(false)}\\n\\t\\t\\t\\t\\tonCancel={() => this.props.handlerDialogOpenFile(false)}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\thist<DropZone />\\n\\t\\t\\t\\t</Modal>\\n\\t\\t\\t\\t<Layout id='baraction' >\\n\\t\\t\\t\\t\\t<Row className='nav-bar'>\\n\\t\\t\\t\\t\\t\\t<ButtonGroup id='nomove1'>\\n\\t\\t\\t\\t\\t\\t\\t<Icon type='fire' />\\n\\t\\t\\t\\t\\t\\t\\t<Dropdown overlay={ this.MenuFile } trigger={['click']}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button type='link' ghost>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tArchivo\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t</Dropdown>\\n\\t\\t\\t\\t\\t\\t\\t<Dropdown overlay={ this.MenuEdit } trigger={['click']}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button type='link' ghost>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tEditar\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t</Dropdown>\\n\\t\\t\\t\\t\\t\\t\\t<Dropdown overlay={ this.MenuSelection } trigger={['click']}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button type='link' ghost>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tSeleccion\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t</Dropdown>\\n\\t\\t\\t\\t\\t\\t\\t<Dropdown overlay={ this.MenuHelp} trigger={['click']}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button type='link' ghost>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tAyuda\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t</Dropdown>\\n\\t\\t\\t\\t\\t\\t</ButtonGroup>\\n\\t\\t\\t\\t\\t\\t<ButtonGroup id='buttongroup'>\\n\\t\\t\\t\\t\\t\\t\\t<Button type='link' ghost  onClick={this.handlerWindowMinimize}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<svg aria-hidden='true' version='1.1' width='10' height='10'>\\n\\t\\t\\t\\t\\t\\t\\t\\t<path fill='currentColor' d='M 0,5 10,5 10,6 0,6 Z' />\\n\\t\\t\\t\\t\\t\\t\\t\\t</svg>\\n\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t{ Maximize===true ?  (\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button type='link' ghost onClick={this.handlerWindowMaximize}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t❐\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t\\t<Button type='link' ghost onClick={this.handlerWindowRestore} >\\n\\t\\t\\t\\t\\t\\t\\t\\t❐\\n\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t<Button type='danger' onClick={this.handlerWindowClose}>\\n\\t\\t\\t\\t\\t\\t\\t\\tx\\n\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t</ButtonGroup>\\n\\t\\t\\t\\t\\t</Row>\\n\\t\\t\\t\\t</Layout>\\n\\t\\t\\t\\t<Layout>\\n\\t\\t\\t\\t\\t<Sider collapsible onClick={this.toggle} style={{ minHeight: '100vh' }}>\\n\\t\\t\\t\\t\\t\\t<Menu\\n\\t\\t\\t\\t\\t\\t\\ttheme='dark'\\n\\t\\t\\t\\t\\t\\t\\tmode='inline'\\n\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t<SubMenu\\n\\t\\t\\t\\t\\t\\t\\t\\tkey='cap1'\\n\\t\\t\\t\\t\\t\\t\\t\\ttitle={\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Icon type='folder' />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>Carpeta 1</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key='1'>Archetype 1</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key='2'>Archetype 2</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key='3'>Archetype 3</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key='4'>Archetype 4</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t</SubMenu>\\n\\t\\t\\t\\t\\t\\t\\t<SubMenu\\n\\t\\t\\t\\t\\t\\t\\t\\tkey='cap2'\\n\\t\\t\\t\\t\\t\\t\\t\\ttitle={\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Icon type='folder' />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>Carpeta 2</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key='5'>Archetype 1</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key='6'>Archetype 2</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key='7'>Archetype 3</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key='8'>Archetype 4</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t</SubMenu>\\n\\t\\t\\t\\t\\t\\t\\t<SubMenu\\n\\t\\t\\t\\t\\t\\t\\t\\tkey='Blocks'\\n\\t\\t\\t\\t\\t\\t\\t\\ttitle={\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Icon type='block' />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>Bloques</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key='block1'>Bloque1</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t</SubMenu>\\n\\t\\t\\t\\t\\t\\t</Menu>\\n\\t\\t\\t\\t\\t</Sider>\\n\\t\\t\\t\\t\\t<Layout>\\n\\t\\t\\t\\t\\t\\t<Content>\\n\\t\\t\\t\\t\\t\\t\\t<Layout>\\n\\t\\t\\t\\t\\t\\t\\t\\t<FileManager />\\n\\t\\t\\t\\t\\t\\t\\t</Layout>\\n\\t\\t\\t\\t\\t\\t</Content>\\n\\t\\t\\t\\t\\t\\t<Footer style={{ textAlign: 'center' }}>\\n\\t\\t\\t\\t\\t\\t\\tArchetypes ©2019 Created by WorkOrWate\\n\\t\\t\\t\\t\\t\\t</Footer>\\n\\t\\t\\t\\t\\t</Layout>\\n\\t\\t\\t\\t</Layout>\\n\\t\\t\\t</div>\\n\\t\\t);\\n\\t}\\n}\\nconst mapStateToProps = state => {\\n\\treturn {\\n\\t\\ttitle: state.title,\\n\\t\\tdialogOpenFile: state.dialogOpenFile,\\n\\t\\tcurrentFile: state.currentFile,\\n\\t\\tfiles: state.files,\\n\\t\\telectron: state.electron\\n\\t};\\n}\\nconst mapDispatchToProps = dispatch => {\\n\\treturn {\\n\\t\\thandlerAdd(){\\n\\t\\t\\tdispatch(onEdit('add'));\\n\\t\\t},\\n\\t\\thandlerChangeTitle(newtitle) {\\n\\t\\t\\tdispatch(changeTitle(newtitle));\\n\\t\\t},\\n\\t\\thandlerDialogOpenFile(modalState) {\\n\\t\\t\\tdispatch(toggleOpenFileDialog(modalState));\\n\\t\\t},\\n\\t\\thandlerDownloadFile(ipc, file, files) {\\n\\t\\t\\thandlerDownload(ipc, file, files)\\n\\t\\t},\\n\\t\\thandlerSaveAsFile(ipc, file, files) {\\n\\t\\t\\thandlerSaveAs(ipc, file, files)\\n\\t\\t}\\n\\t}\\n}\\nnexport default connect(mapStateToProps, mapDispatchToProps)(Home);\";\n\nconst tablahandlerAddFiles = [\n    {\n      key: '1',\n      parametro: 'aFiles',\n      descripcion: 'Arreglo de objetos json con los datos de cada archivo seleccionado para cargar.',\n      tipo: 'Array',\n    },\n    {\n      key: '2',\n      parametro: 'newTabIndex',\n      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',\n      tipo: 'Número',\n    },\n    {\n      key: '3',\n      parametro: 'files',\n      descripcion: 'El arreglo que contiene los archivos en uso.',\n      tipo: 'Array',\n    },\n    {\n      key: '4',\n      parametro: 'ref',\n      descripcion: 'Referencia React al <input />.',\n      tipo: 'Referencia React',\n    }\n];\nconst tablaDropZoneFile = [\n    {\n      key: '1',\n      atributo: 'newTabIndex',\n      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',\n      tipo: 'Número',\n    },{\n        key: '2',\n        atributo: 'files',\n        descripcion: 'El arreglo que contiene los archivos en uso.',\n        tipo: 'Array',\n    }\n];\nexport const Homepage = {\n    \"title\": \"Pagina de Inicio\",\n    \"content\": (\n        <div>\n            <Title level={2}>El componenete \"Home.js\".</Title>\n            <SyntaxHighlighter language=\"javascript\" style={docco}>\n                    <Paragraph copyable>\n                        {\n                            codeString\n                        }\n                    </Paragraph>\n                </SyntaxHighlighter>\n            \n            <Title level={4}>La función \"toggle\" .</Title>\n            <p>\n              Esta función se encarga de expandir el contenido de los Sub Menu\".\n            </p>\n            <Title level={4}>Las funcines \"Menu\" .</Title>\n            <p>\n              Estas funciones son las que contienen nuestros menus de archivos, con las que podremos abrir, cargar, guardar, etc\".\n            </p>\n            \n            \n        </div>\n        )\n}","import React from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport { Typography, Table } from 'antd';\r\nconst { Paragraph, Title } = Typography;\r\nconst { Column } = Table;\r\nconst codeString = \"import React, { Component, Children } from 'react';\\nimport { connect } from 'react-redux';\\nimport { changeTitle, toggleOpenFileDialog, handlerDownload, openDbArchetype } from '../actions/home';\\nimport { onEdit, updateblocklist } from '../actions/FileManager';\\nimport FileManager from './FileManager';\\nimport DropZone from './DropZoneFile';\\nimport { Button,Layout, Menu, Icon, Dropdown, Modal, Row, message } from 'antd';\\nimport './Home.css';\\nimport axios from 'axios';\\nimport { feedBackMessage } from '../actions/others';\\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\\nconst { SubMenu } = Menu;\\nconst { Content, Footer, Sider} = Layout;\\n\\nconst grid = 6;\\n\\nconst getItemStyle = (isDragging,draggableStyle ) => ({\\n\\tuserSelect: 'none',\\n\\tpadding: grid * 5,\\n\\tmarginTop: 10,\\n\\tmarginLeft:20,\\n\\tmarginRight:20,\\n\\tmarginBottom:10,\\n\\tborderBottomLeftRadius: 30,\\n\\tborderBottomRightRadius: 10,\\n\\tborderTopLeftRadius: 10,\\n\\tborderTopRightRadius: 30,\\n\\tborder:'solid',\\n\\tbackground: isDragging ? '#6188C0' : '#6188C0', \\n\\t...draggableStyle\\n});\\n\\n  //Estilo del fondo \\nconst getListStyle = isDraggingOver => ({\\n  background: isDraggingOver ? 'none' : 'none',\\n  padding: 1,\\n  borderRadius: 10,\\n  width: 190\\n});\\n\\nclass Home extends Component {\\n\\tconstructor(props){\\n\\t\\tsuper(props);\\n\\t\\tthis.toggle = this.toggle.bind(this);\\n\\t\\tthis.state = {\\n\\t\\t\\tcollapsed:false\\n\\t\\t};\\n\\t\\tthis.MenuFile = this.MenuFile.bind(this);\\n\\t\\tthis.MenuHelp = this.MenuHelp.bind(this);\\n\\t\\tthis.MenuEdit = this.MenuEdit.bind(this);\\n\\t\\tthis.MenuSelection = this.MenuSelection.bind(this);\\n\\t\\tthis.onDragEnd = this.onDragEnd.bind(this);\\n\\t}\\n\\tonDragEnd(result) {\\n\\t\\t\\n\\t\\tif (!result.destination) {\\n\\t\\t  return;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (result.source.droppableId !== result.destination.droppableId) {\\n\\t\\t\\tlet itemToMove;\\n\\t\\t\\tlet allList = this.props.files.filter(file=>file.key===this.props.currentFile)[0].allList;\\n\\t\\t\\tallList.forEach((list,index) => {\\n\\t\\t\\t\\tlist.lista=list.lista.splice(0);\\n\\t\\t\\t\\t/*if(result.source.droppableId === list.id){\\n\\t\\t\\t\\t\\titemToMove=allList[index].lista.splice(result.source.index,1)[0];\\n\\t\\t\\t\\t\\tallListt\\n\\t\\t\\t\\t}*/\\n\\t\\t\\t});\\n\\t\\t\\t//ALGORITMO PARA TRASLADO DE BLOQUE AQUI(TENER EN CUENTA POSIBILIDAD DE AISLAR LA LISTA DE PRUEBA)\\n\\t\\t\\t\\n\\t\\t\\tif (result.source.droppableId === 'Lista0') {\\n\\t\\t\\t\\t//console.log(allList[0].lista.filter(block => block.content === result.draggableId)[0]);\\n\\t\\t\\t\\titemToMove = this.props.sampleList.lista.filter(block => block.content === result.draggableId)[0];\\n\\t\\t\\t\\titemToMove = {id:itemToMove.id + this.props.currentFile + 'Copia', content:itemToMove.content + this.props.currentFile + 'Copia',type:itemToMove.type};\\n\\t\\t\\t\\t//itemToMove = allList[0].lista.splice(result.source.index, 1)[0];\\n\\t\\t\\t\\tconst destinationlist = allList.filter(list => list.id === result.destination.droppableId)[0];\\n\\t\\t\\t\\t//const originlist = allList.filter(list => list.id === result.source.droppableId)[0];\\n\\t\\t\\t\\t//console.log(itemToMove[0], result.destination.index, items2);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif(destinationlist.type===itemToMove.type){\\n\\t\\t\\t\\t\\tconsole.log(result);\\n\\t\\t\\t\\t\\tallList[allList.indexOf(destinationlist)].lista.splice(result.destination.index, 0, itemToMove);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\tallList.forEach(list =>{\\n\\t\\t\\t\\t\\tthis.props.handlerUpdateList(list);\\n\\t\\t\\t});\\n\\t\\t\\t\\n\\t\\t} else {\\t  \\n\\t\\t\\t\\n\\t\\t}\\n\\t  }\\n\\tMenuFile() {\\n\\t\\treturn(<Menu theme='light'>\\n\\t\\t\\t<Menu.Item key='nwfile' onClick={this.props.handlerAdd}><Icon type='file' /> Nuevo Archivo</Menu.Item>\\n\\t\\t\\t<Menu.Item key='opfile' onClick={() => this.props.handlerDialogOpenFile(true)}>\\n\\t\\t\\t\\t<Icon type='upload' /> Abrir archivo\\n\\t\\t\\t</Menu.Item>\\n\\t\\t\\t<Menu.Item key='svsave' onClick={()=>{this.props.handlerDownloadFile(this.props.currentFile, this.props.files)}}>\\n\\t\\t\\t\\t<Icon type='download' /> Descargar Archivo\\n\\t\\t\\t</Menu.Item>\\n\\t\\t\\t<Menu.Divider />\\n\\t\\t\\t<Menu.Item key='saveInDB' onClick={(e)=>{this.props.handlerSaveInDB(this.props.currentFile, this.props.files);}}>\\n\\t\\t\\t\\t<Icon type='database' /> Guardar actual en Base de datos\\n\\t\\t\\t</Menu.Item>\\n\\t\\t\\t<Menu.Item key='saveAllInDB' onClick={(e)=>{this.props.handlerSaveAllInDB(this.props.files);}}>\\n\\t\\t\\t\\t<Icon type='database' /> Guardar todos en Base de datos\\n\\t\\t\\t</Menu.Item>\\n\\t\\t</Menu>);\\n\\t}\\n\\tMenuEdit(){\\n\\t\\treturn(<Menu theme='light'>\\n\\t\\t\\t<Menu.Item key='undo'>Deshacer</Menu.Item>\\n\\t\\t\\t<Menu.Item key='redo'>Rehacer</Menu.Item>\\n\\t\\t\\t<Menu.Item key='cut'>Cortar</Menu.Item>\\n\\t\\t\\t<Menu.Item key='copy'>Copiar</Menu.Item>\\n\\t\\t\\t<Menu.Item key='paste'>Pegar</Menu.Item>\\n\\t\\t</Menu>);\\n\\t}\\n\\tMenuSelection(){\\n\\t\\treturn(<Menu theme='light'>\\n\\t\\t\\t<Menu.Item key='slc'>Seleccionar todo</Menu.Item>\\n\\t\\t</Menu>);\\n\\t}\\n\\tMenuHelp(){\\n\\t\\treturn(<Menu theme='light'>\\n\\t\\t\\t<Menu.Item key='docu'>Documentation</Menu.Item>\\n\\t\\t\\t<Menu.Item key='about'>Acerca de Editor de Arquetipos</Menu.Item>\\n\\t\\t</Menu>);\\n\\t}\\n\\ttoggle() {\\n\\t\\tthis.setState(state => ({ collapse: !state.collapse }));\\n\\t}\\n\\tcomponentWillMount(){\\n\\t\\tthis.props.getArchetypes();\\n\\t}\\n\\trender(){\\n\\t\\treturn (\\n\\t\\t\\t<div>\\n\\t\\t\\t\\t<Modal\\n\\t\\t\\t\\t\\ttitle='Abrir Archivo'\\n\\t\\t\\t\\t\\tcentered\\n\\t\\t\\t\\t\\tvisible={this.props.dialogOpenFile}\\n\\t\\t\\t\\t\\tonOk={() => this.props.handlerDialogOpenFile(false)}\\n\\t\\t\\t\\t\\tonCancel={() => this.props.handlerDialogOpenFile(false)}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<DropZone />\\n\\t\\t\\t\\t</Modal>\\n\\t\\t\\t\\t<Layout>\\n\\t\\t\\t\\t\\t<Row className='nav-bar'>\\n\\t\\t\\t\\t\\t\\t<Icon type='fire' />\\n\\t\\t\\t\\t\\t\\t<Dropdown overlay={ this.MenuFile } trigger={['click']}>\\n\\t\\t\\t\\t\\t\\t\\t<Button type= 'link' ghost>\\n\\t\\t\\t\\t\\t\\t\\t\\tArchivo\\n\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t</Dropdown>\\n\\t\\t\\t\\t\\t\\t<Dropdown overlay={ this.MenuEdit } trigger={['click']}>\\n\\t\\t\\t\\t\\t\\t\\t<Button type= 'link' ghost>\\n\\t\\t\\t\\t\\t\\t\\t\\tEditar\\n\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t</Dropdown>\\n\\t\\t\\t\\t\\t\\t<Dropdown overlay={ this.MenuSelection } trigger={['click']}>\\n\\t\\t\\t\\t\\t\\t\\t<Button type= 'link' ghost>\\n\\t\\t\\t\\t\\t\\t\\t\\tSeleccion\\n\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t</Dropdown>\\n\\t\\t\\t\\t\\t\\t<Dropdown overlay={ this.MenuHelp} trigger={['click']}>\\n\\t\\t\\t\\t\\t\\t\\t<Button type= 'link' ghost>\\n\\t\\t\\t\\t\\t\\t\\t\\tAyuda\\n\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t</Dropdown>\\n\\t\\t\\t\\t\\t</Row>\\n\\t\\t\\t\\t</Layout>\\n\\t\\t\\t\\t<DragDropContext onDragEnd={this.onDragEnd}>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t<Layout>\\n\\t\\t\\t\\t\\t\\t<Sider collapsible onClick={this.toggle} style={{ minHeight: '100vh' }}>\\n\\t\\t\\t\\t\\t\\t\\t<Menu\\n\\t\\t\\t\\t\\t\\t\\t\\ttheme= 'dark'\\n\\t\\t\\t\\t\\t\\t\\t\\tmode='inline'\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<SubMenu\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tkey='cap2'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle={\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Icon type='folder' />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>Arquetipos</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item onClick={this.props.getArchetypes}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Icon type='reload' /> Actualizar Lista\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis.props.DBArchetypes.map((archetype, indx)=>(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Menu.Item key={ indx } onClick={(e)=>{this.props.handlerDBArchetypeClick(e, this.props.DBArchetypes);}}>{archetype.archetype_id.value}</Menu.Item>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t))\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t</SubMenu>\\n\\t\\t\\t\\t\\t\\t\\t\\t<SubMenu\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tkey='Blocks'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle={\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Icon type='block' />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>Bloques</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Droppable droppableId='Lista0'>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{(provided, snapshot) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tref={provided.innerRef}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstyle={getListStyle(snapshot.isDraggingOver)}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{this.props.sampleList.lista.map((item, index) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Draggable key={`list1-${item.id}`} draggableId={item.id} index={index}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{(provided, snapshot) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tref={provided.innerRef}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{...provided.draggableProps}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{...provided.dragHandleProps}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstyle={getItemStyle(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsnapshot.isDragging,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tprovided.draggableProps.style\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{item.content}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</Draggable>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{provided.placeholder}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</Droppable>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t</SubMenu>\\n\\t\\t\\t\\t\\t\\t\\t</Menu>\\n\\t\\t\\t\\t\\t\\t</Sider>\\n\\t\\t\\t\\t\\t\\t<Layout>\\n\\t\\t\\t\\t\\t\\t\\t<Content>\\n\\t\\t\\t\\t\\t\\t\\t\\t<FileManager>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t</FileManager>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t</Content>\\n\\t\\t\\t\\t\\t\\t\\t<Footer style={{ textAlign: 'center' }}>\\n\\t\\t\\t\\t\\t\\t\\t\\tArchetypes ©2019 Created by WorkOrWate\\n\\t\\t\\t\\t\\t\\t\\t</Footer>\\n\\t\\t\\t\\t\\t\\t</Layout>\\n\\t\\t\\t\\t\\t</Layout>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</DragDropContext>\\n\\t\\t\\t</div>\\n\\t\\t);\\n\\t}\\n}\\n\\nconst mapStateToProps = state => {\\n\\treturn {\\n\\t\\ttitle: state.title,\\n\\t\\tdialogOpenFile: state.dialogOpenFile,\\n\\t\\tcurrentFile: state.currentFile,\\n\\t\\tfiles: state.files,\\n\\t\\tDBArchetypes: state.DBArchetypes,\\n\\t\\tsampleList:state.sampleList\\n\\t};\\n}\\n\\nconst mapDispatchToProps = dispatch => {\\n\\treturn {\\n\\t\\thandlerAdd(){\\n\\t\\t\\tdispatch(onEdit('add'));\\n\\t\\t},\\n\\t\\thandlerChangeTitle(newtitle) {\\n\\t\\t\\tdispatch(changeTitle(newtitle));\\n\\t\\t},\\n\\t\\thandlerDialogOpenFile(modalState) {\\n\\t\\t\\tdispatch(toggleOpenFileDialog(modalState));\\n\\t\\t},\\n\\t\\thandlerDownloadFile(file, files) {\\n\\t\\t\\thandlerDownload(dispatch, file, files)\\n\\t\\t},\\n\\t\\thandlerSaveInDB(file, files){\\n\\t\\t\\tconst fileTarget = files.filter(ofile => ofile.key === file)[0];\\n\\t\\t\\tif(navigator.onLine){\\n\\t\\t\\t\\tif(fileTarget._id === '') {\\n\\t\\t\\t\\t\\taxios.post('http://localhost:4000/api/archetype/', fileTarget.content, {\\n\\t\\t\\t\\t\\t\\theaders: {'Access-Control-Allow-Origin': '*'}\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.then(response => {\\n\\t\\t\\t\\t\\t\\tconsole.log(response.data);\\n\\t\\t\\t\\t\\t\\tif(response.data.success){\\n\\t\\t\\t\\t\\t\\t\\tfileTarget._id = response.data._id;\\n\\t\\t\\t\\t\\t\\t\\tdispatch({\\n\\t\\t\\t\\t\\t\\t\\t\\ttype: 'updateFile',\\n\\t\\t\\t\\t\\t\\t\\t\\tfile: fileTarget\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'success', msg: 'El arquetipo se ha subido correctamente.'});\\n\\t\\t\\t\\t\\t\\t\\tthis.getArchetypes();\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Ya existe un arquetipo con ese nombre, por favor trabaja con el arquetipo encontrandolo en la lista.'});\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.catch(e => {\\n\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar guardar el arquetipo, comprueba tu conexión a internet.'});\\n\\t\\t\\t\\t\\t\\tconsole.log(e);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t} else if (fileTarget._id !== '') {\\n\\t\\t\\t\\t\\taxios.put('http://localhost:4000/api/archetype/', { _id : fileTarget._id, data: fileTarget.content})\\n\\t\\t\\t\\t\\t.then(response => {\\n\\t\\t\\t\\t\\t\\tconsole.log(response.data);\\n\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'success', msg: 'El arquetipo se ha actualizado correctamente.'});\\n\\t\\t\\t\\t\\t\\tthis.getArchetypes();\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.catch(e => {\\n\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar guardar el arquetipo, comprueba tu conexión a internet.'});\\n\\t\\t\\t\\t\\t\\tconsole.log(e);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Al parecer no tienes conexión a internet.'});\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t},\\n\\t\\thandlerSaveAllInDB(files){\\n\\t\\t\\tfiles.map((file,  indx)=>{\\n\\t\\t\\t\\tif(navigator.onLine){\\n\\t\\t\\t\\t\\tif(file._id === '') {\\n\\t\\t\\t\\t\\t\\taxios.post('http://localhost:4000/api/archetype/', file.content, {\\n\\t\\t\\t\\t\\t\\t\\theaders: {'Access-Control-Allow-Origin': '*'}\\n\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t.then(response => {\\n\\t\\t\\t\\t\\t\\t\\tconsole.log(response.data);\\n\\t\\t\\t\\t\\t\\t\\tif(response.data.success){\\n\\t\\t\\t\\t\\t\\t\\t\\tfile._id = response.data._id;\\n\\t\\t\\t\\t\\t\\t\\t\\tdispatch({\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttype: 'updateFile',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfile\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'success', msg: 'El arquetipo se ha subido correctamente.'});\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.getArchetypes();\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Ya existe un arquetipo con ese nombre, por favor trabaja con el arquetipo encontrandolo en la lista.'});\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t.catch(e => {\\n\\t\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar guardar el arquetipo, comprueba tu conexión a internet.'});\\n\\t\\t\\t\\t\\t\\t\\tconsole.log(e);\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t} else if (file._id !== '') {\\n\\t\\t\\t\\t\\t\\taxios.put('http://localhost:4000/api/archetype/', { _id : file._id, data: file.content})\\n\\t\\t\\t\\t\\t\\t.then(response => {\\n\\t\\t\\t\\t\\t\\t\\tconsole.log(response.data);\\n\\t\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'success', msg: 'El arquetipo se ha actualizado correctamente.'});\\n\\t\\t\\t\\t\\t\\t\\tthis.getArchetypes();\\n\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t\\t.catch(e => {\\n\\t\\t\\t\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar guardar el arquetipo, comprueba tu conexión a internet.'});\\n\\t\\t\\t\\t\\t\\t\\tconsole.log(e);\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Al parecer no tienes conexión a internet.'});\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t});\\n\\t\\t},\\n\\t\\tgetArchetypes(){\\n\\t\\t\\tif(navigator.onLine){\\n\\t\\t\\t\\treturn axios.get('http://localhost:4000/api/archetype/', {\\n\\t\\t\\t\\t\\theaders: {'Access-Control-Allow-Origin': '*'}\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\t.then(response => {\\n\\t\\t\\t\\t\\tdispatch({\\n\\t\\t\\t\\t\\t\\ttype: 'updateDBArchetypesVariable',\\n\\t\\t\\t\\t\\t\\tDBArchetypes: response.data\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\t.catch(e => {\\n\\t\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar contactar al servidor, comprueba tu conexión a internet.'});\\n\\t\\t\\t\\t\\tconsole.log(e);\\n\\t\\t\\t\\t});\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfeedBackMessage({ type: 'error', msg: 'Al parecer no tienes conexión a internet.'});\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\thandlerDBArchetypeClick(e, DBArchetypes){\\n\\t\\t\\tdispatch(openDbArchetype(DBArchetypes[parseInt(e.key)]));\\n\\t\\t},\\n\\t\\thandlerUpdateList(blocklist){\\n\\t\\t\\tdispatch(updateblocklist(blocklist));\\n\\t\\t}\\n\\t\\t\\n\\t}\\n}\\n\\n\\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\";\r\n\r\nconst tablahandlerAddFiles = [\r\n    {\r\n      key: '1',\r\n      parametro: 'aFiles',\r\n      descripcion: 'Arreglo de objetos json con los datos de cada archivo seleccionado para cargar.',\r\n      tipo: 'Array',\r\n    },\r\n    {\r\n      key: '2',\r\n      parametro: 'newTabIndex',\r\n      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',\r\n      tipo: 'Número',\r\n    },\r\n    {\r\n      key: '3',\r\n      parametro: 'files',\r\n      descripcion: 'El arreglo que contiene los archivos en uso.',\r\n      tipo: 'Array',\r\n    },\r\n    {\r\n      key: '4',\r\n      parametro: 'ref',\r\n      descripcion: 'Referencia React al <input />.',\r\n      tipo: 'Referencia React',\r\n    }\r\n];\r\nexport const Homepage2 = {\r\n    \"title\": \"Pagina de Inicio\",\r\n    \"content\": (\r\n        <div>\r\n            <Title level={2}>El componenete \"Home.js\".</Title>\r\n            <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n                    <Paragraph copyable>\r\n                        {\r\n                            codeString\r\n                        }\r\n                    </Paragraph>\r\n                </SyntaxHighlighter>\r\n            \r\n            <Title level={4}>La función \"toggle\" .</Title>\r\n            <p>\r\n              Esta función se encarga de expandir el contenido de los Sub Menu\".\r\n            </p>\r\n            <Title level={4}>Las funcines \"Menu\" .</Title>\r\n            <p>\r\n              Estas funciones son las que contienen nuestros menus de archivos, con las que podremos abrir, cargar, guardar, etc\".\r\n            </p>\r\n            \r\n            \r\n        </div>\r\n        )\r\n}","import React from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport { Typography, Table } from 'antd';\r\nconst { Paragraph, Title } = Typography;\r\nconst { Column } = Table;\r\nconst codeString = \"import React, { Component } from 'react';\\nimport { BrowserRouter, Route } from 'react-router-dom';\\nimport { connect } from 'react-redux';\\nimport Home from './Home';\\nconst { electron } = window;\\n//import { DatePicker } from 'antd';\\nconst About = () => <h2>About</h2>;\\nclass App extends Component {\\n\\tconstructor(props) {\\n\\t\\tsuper(props);\\n\\t\\tthis.state = {\\n\\t\\tisMaximized:false,\\n\\t\\t} \\n\\t}\\n\\tcomponentWillMount(){\\n\\t\\tthis.props.setElectron(electron);\\n\\t\\tconst { ipcRenderer } = electron;\\n\\t\\tipcRenderer.on('mainWindow:isMaximized', (event, isMaximized) => {\\n\\t\\t\\tthis.setState({ isMaximized });\\n\\t\\t});\\n\\t\\tipcRenderer.send('mainWindow:isMaximized');\\n\\t}\\n\\trender(){\\n\\t\\treturn (\\n\\t\\t\\t<BrowserRouter>\\n\\t\\t\\t\\t<Route exact path='/' component={ Home } />\\n\\t\\t\\t\\t<Route path='/about' component={ About } />\\n\\t\\t\\t</BrowserRouter>\\n\\t\\t);\\n\\t}\\n}\\nconst mapStateToProps = state => {\\n\\treturn {\\n\\t\\tfiles: state.files,\\n\\t\\telectron: state.electron\\n\\t};\\n}\\nconst mapDispatchToProps = dispatch => {\\n\\treturn {\\n\\t\\tsetElectron(electron) {\\n\\t\\t\\tdispatch({\\n\\t\\t\\ttype: 'setElectron',\\n\\t\\t\\telectron\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n}\\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\";\r\n\r\nconst tablahandlerAddFiles = [\r\n    {\r\n      key: '1',\r\n      parametro: 'aFiles',\r\n      descripcion: 'Arreglo de objetos json con los datos de cada archivo seleccionado para cargar.',\r\n      tipo: 'Array',\r\n    },\r\n    {\r\n      key: '2',\r\n      parametro: 'newTabIndex',\r\n      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',\r\n      tipo: 'Número',\r\n    },\r\n    {\r\n      key: '3',\r\n      parametro: 'files',\r\n      descripcion: 'El arreglo que contiene los archivos en uso.',\r\n      tipo: 'Array',\r\n    },\r\n    {\r\n      key: '4',\r\n      parametro: 'ref',\r\n      descripcion: 'Referencia React al <input />.',\r\n      tipo: 'Referencia React',\r\n    }\r\n];\r\nconst tablaDropZoneFile = [\r\n    {\r\n      key: '1',\r\n      atributo: 'newTabIndex',\r\n      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',\r\n      tipo: 'Número',\r\n    },{\r\n        key: '2',\r\n        atributo: 'files',\r\n        descripcion: 'El arreglo que contiene los archivos en uso.',\r\n        tipo: 'Array',\r\n    }\r\n];\r\nexport const Appini = {\r\n    \"title\": \"La Aplicación React\",\r\n    \"content\": (\r\n        <div>\r\n            <Title level={2}>El componenete \"App.js\".</Title>\r\n            <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n                    <Paragraph copyable>\r\n                        {\r\n                            codeString\r\n                        }\r\n                    </Paragraph>\r\n                </SyntaxHighlighter>\r\n            \r\n            <Title level={4}>La función \"mapStateToProps\" .</Title>\r\n            <p>La función \"mapStateToProps\" es la que como dice su nombre, mapea el estado del store.js.</p>\r\n            <Title level={4}>La función \"mapDispatchToProps\" .</Title>\r\n            <p>La función \"mapDispatchToProps\" es la que como dice su nombre mapea el despacho (dispatch) de acciones (actions), Esta función es la encargada de que al momento de que se comienze a renderizar la aplicación se setea el electron en la store .</p>\r\n            <Title level={4}>La función \"componentWillMount\" .</Title>\r\n            <p>\r\n               Nos ayuda a enviar mensajes sincrónicos y asincrónicos desde el proceso de renderizado(página web) al proceso principal, como controlar el estado al momento de tener nuestra ventana de la app maximizada.\r\n            </p>\r\n        </div>\r\n        )\r\n}","import React, { Component } from 'react';\r\nimport { Layout, Menu, Row, Icon, Input, Col, Typography } from 'antd';\r\nimport { InfraestructuraWeb } from './sections/InfraestructuraWeb';\r\nimport { InfraestructuraDesktop } from './sections/InfrestructuraDesktop';\r\nimport { Comenzando } from './sections/Comenzando';\r\nimport { AdministradorDeArchivos } from './sections/FileManager';\r\nimport { AdministradorDeArchivos2 } from './sections/FileManager2';\r\nimport { DropZoneFile } from './sections/DropZoneFile';\r\nimport { DropZoneFile2 } from './sections/DropZoneFile2';\r\nimport { Homepage } from './sections/Homepage';\r\nimport { Homepage2 } from './sections/Homepage2';\r\nimport { Appini } from './sections/Appini';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nconst { Paragraph, Title } = Typography;\r\nconst { SubMenu } = Menu;\r\nconst { Header, Content, Sider } = Layout;\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      collapsed: false,\r\n      content: Comenzando \r\n    }\r\n    this.toggleContent = this.toggleContent.bind(this);\r\n  }\r\n  toggleCollapsed = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n  toggleContent = (event) => {\r\n    //console.log(event.item.props.children.length);\r\n    console.log(event);\r\n    if (event.item.props.children.length === 2) {\r\n      if (event.item.props.children[1].props.children === \"Comenzando\") {\r\n        this.setState({\r\n          content: Comenzando\r\n        });\r\n      }\r\n    } else if (event.item.props.children === \"Aplicación Web\") {\r\n      this.setState({\r\n        content: InfraestructuraWeb\r\n      });\r\n    } else if (event.item.props.children === \"Aplicación Desktop\") {\r\n      this.setState({\r\n        content: InfraestructuraDesktop\r\n      });\r\n    } else if (event.item.props.children === \"Administrador de Archivos\") {\r\n      this.setState({\r\n        content: AdministradorDeArchivos\r\n      });\r\n    }else if (event.item.props.children === \"Administrar Archivos\") {\r\n      this.setState({\r\n        content: AdministradorDeArchivos2\r\n      });\r\n    }  else if (event.item.props.children === \"Cargador de archivos\") {\r\n      this.setState({\r\n        content: DropZoneFile\r\n      });\r\n    }else if (event.item.props.children === \"Carga de archivos\") {\r\n      this.setState({\r\n        content: DropZoneFile2\r\n      });\r\n    } else if (event.item.props.children === \"Pagina Principal\"){\r\n      this.setState({\r\n        content: Homepage2\r\n      });\r\n    }else if (event.item.props.children === \"App\"){\r\n      this.setState({\r\n        content: Appini\r\n      });\r\n    } else if(typeof event.item.props.children === 'string'){\r\n      /*if (event.item.props.children === \"Any\"){\r\n        const codeString = Home2;\r\n          const content = {\r\n            title: \"Perico\",\r\n            content: (\r\n                <div>\r\n                    <Title level={2}>Perico.</Title>\r\n                    <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n                      <Paragraph copyable>\r\n                        {\r\n                          codeString\r\n                        }\r\n                      </Paragraph>\r\n                    </SyntaxHighlighter>\r\n                </div>\r\n                )\r\n        };\r\n        this.setState({\r\n          content\r\n        });\r\n      }*/\r\n    }\r\n}\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <Layout >\r\n          <Sider \r\n              trigger={null}\r\n              collapsible \r\n              collapsed={this.state.collapsed} \r\n              onCollapse= {this.toggleCollapsed}>\r\n              <div className=\"logo\" />\r\n              <Menu\r\n                defaultSelectedKeys={['1']} \r\n                mode=\"inline\"\r\n                theme=\"dark\"\r\n              >\r\n                <Menu.Item key=\"1\" onClick={this.toggleContent}>\r\n                  <Icon type=\"pie-chart\" />\r\n                  <span>Comenzando</span>\r\n                </Menu.Item>\r\n                <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>Infraestructura</span></span>}>\r\n                  <Menu.Item key=\"2\" onClick={this.toggleContent}>Aplicación Web</Menu.Item>\r\n                  <Menu.Item key=\"3\" onClick={this.toggleContent}>Aplicación Desktop</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub2\" title={<span><Icon type=\"mail\" /><span>Componentes</span></span>}>\r\n                  <Menu.Item key=\"5\" onClick={this.toggleContent}>Administrador de Archivos</Menu.Item>\r\n                  <Menu.Item key=\"6\" onClick={this.toggleContent}>Cargador de archivos</Menu.Item>\r\n                  <Menu.Item key=\"7\" onClick={this.toggleContent}>Homepage</Menu.Item>\r\n                  <Menu.Item key=\"8\" onClick={this.toggleContent}>App</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub3\" title={<span><Icon type=\"mail\" /><span>Acciones</span></span>}>\r\n                  <Menu.Item key=\"9\" onClick={this.toggleContent}>Administrar Archivos</Menu.Item>\r\n                  <Menu.Item key=\"10\" onClick={this.toggleContent}>Carga de archivos</Menu.Item>\r\n                  <Menu.Item key=\"11\" onClick={this.toggleContent}>Pagina Principal</Menu.Item>\r\n                </SubMenu>\r\n              </Menu>\r\n            </Sider>\r\n            <Layout>\r\n              <Header style={{ background: '#fff', padding: 0 }}>\r\n                <Row>\r\n                  <Col span={2}>\r\n                    <Icon\r\n                      className=\"trigger\"\r\n                      type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n                      onClick={this.toggleCollapsed}\r\n                    />\r\n                  </Col>\r\n                  <Col span={22} className=\"menu-bar\">\r\n                    <Menu\r\n                    theme=\"light\"\r\n                    mode=\"horizontal\"\r\n                    defaultSelectedKeys={['1']}\r\n                    style={{ lineHeight: '64px'}}\r\n                  >\r\n                  <Menu.Item kay=\"1\" disabled>\r\n                    <Input.Search\r\n                      className=\"search\"\r\n                      placeholder=\"input search text\"\r\n                      style={{ width: 200 }}\r\n                      onSearch={value => console.log(value)}\r\n                    />\r\n                    </Menu.Item>\r\n                  <Menu.Item key=\"2\">nav 2</Menu.Item>\r\n                  <Menu.Item key=\"3\">nav 3</Menu.Item>\r\n                </Menu>\r\n                  </Col>\r\n                </Row>\r\n                \r\n              </Header>\r\n              <Content\r\n                style={{\r\n                  margin: '24px 16px',\r\n                  padding: 24,\r\n                  background: '#fff',\r\n                  minHeight: 280,\r\n                }}\r\n              >\r\n                <Title style={{ textAlign: 'center' }}>{this.state.content.title}</Title>\r\n                {this.state.content.content}\r\n              </Content>\r\n            </Layout>\r\n        </Layout>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}