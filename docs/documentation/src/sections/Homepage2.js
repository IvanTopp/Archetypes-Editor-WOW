import React from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';
import { Typography, Table } from 'antd';
const { Paragraph, Title } = Typography;
const { Column } = Table;
const codeString = "import React, { Component, Children } from 'react';\nimport { connect } from 'react-redux';\nimport { changeTitle, toggleOpenFileDialog, handlerDownload, openDbArchetype } from '../actions/home';\nimport { onEdit, updateblocklist } from '../actions/FileManager';\nimport FileManager from './FileManager';\nimport DropZone from './DropZoneFile';\nimport { Button,Layout, Menu, Icon, Dropdown, Modal, Row, message } from 'antd';\nimport './Home.css';\nimport axios from 'axios';\nimport { feedBackMessage } from '../actions/others';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nconst { SubMenu } = Menu;\nconst { Content, Footer, Sider} = Layout;\n\nconst grid = 6;\n\nconst getItemStyle = (isDragging,draggableStyle ) => ({\n\tuserSelect: 'none',\n\tpadding: grid * 5,\n\tmarginTop: 10,\n\tmarginLeft:20,\n\tmarginRight:20,\n\tmarginBottom:10,\n\tborderBottomLeftRadius: 30,\n\tborderBottomRightRadius: 10,\n\tborderTopLeftRadius: 10,\n\tborderTopRightRadius: 30,\n\tborder:'solid',\n\tbackground: isDragging ? '#6188C0' : '#6188C0', \n\t...draggableStyle\n});\n\n  //Estilo del fondo \nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'none' : 'none',\n  padding: 1,\n  borderRadius: 10,\n  width: 190\n});\n\nclass Home extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.toggle = this.toggle.bind(this);\n\t\tthis.state = {\n\t\t\tcollapsed:false\n\t\t};\n\t\tthis.MenuFile = this.MenuFile.bind(this);\n\t\tthis.MenuHelp = this.MenuHelp.bind(this);\n\t\tthis.MenuEdit = this.MenuEdit.bind(this);\n\t\tthis.MenuSelection = this.MenuSelection.bind(this);\n\t\tthis.onDragEnd = this.onDragEnd.bind(this);\n\t}\n\tonDragEnd(result) {\n\t\t\n\t\tif (!result.destination) {\n\t\t  return;\n\t\t}\n\t\t\n\t\tif (result.source.droppableId !== result.destination.droppableId) {\n\t\t\tlet itemToMove;\n\t\t\tlet allList = this.props.files.filter(file=>file.key===this.props.currentFile)[0].allList;\n\t\t\tallList.forEach((list,index) => {\n\t\t\t\tlist.lista=list.lista.splice(0);\n\t\t\t\t/*if(result.source.droppableId === list.id){\n\t\t\t\t\titemToMove=allList[index].lista.splice(result.source.index,1)[0];\n\t\t\t\t\tallListt\n\t\t\t\t}*/\n\t\t\t});\n\t\t\t//ALGORITMO PARA TRASLADO DE BLOQUE AQUI(TENER EN CUENTA POSIBILIDAD DE AISLAR LA LISTA DE PRUEBA)\n\t\t\t\n\t\t\tif (result.source.droppableId === 'Lista0') {\n\t\t\t\t//console.log(allList[0].lista.filter(block => block.content === result.draggableId)[0]);\n\t\t\t\titemToMove = this.props.sampleList.lista.filter(block => block.content === result.draggableId)[0];\n\t\t\t\titemToMove = {id:itemToMove.id + this.props.currentFile + 'Copia', content:itemToMove.content + this.props.currentFile + 'Copia',type:itemToMove.type};\n\t\t\t\t//itemToMove = allList[0].lista.splice(result.source.index, 1)[0];\n\t\t\t\tconst destinationlist = allList.filter(list => list.id === result.destination.droppableId)[0];\n\t\t\t\t//const originlist = allList.filter(list => list.id === result.source.droppableId)[0];\n\t\t\t\t//console.log(itemToMove[0], result.destination.index, items2);\n\t\t\t\t\n\t\t\t\tif(destinationlist.type===itemToMove.type){\n\t\t\t\t\tconsole.log(result);\n\t\t\t\t\tallList[allList.indexOf(destinationlist)].lista.splice(result.destination.index, 0, itemToMove);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tallList.forEach(list =>{\n\t\t\t\t\tthis.props.handlerUpdateList(list);\n\t\t\t});\n\t\t\t\n\t\t} else {\t  \n\t\t\t\n\t\t}\n\t  }\n\tMenuFile() {\n\t\treturn(<Menu theme='light'>\n\t\t\t<Menu.Item key='nwfile' onClick={this.props.handlerAdd}><Icon type='file' /> Nuevo Archivo</Menu.Item>\n\t\t\t<Menu.Item key='opfile' onClick={() => this.props.handlerDialogOpenFile(true)}>\n\t\t\t\t<Icon type='upload' /> Abrir archivo\n\t\t\t</Menu.Item>\n\t\t\t<Menu.Item key='svsave' onClick={()=>{this.props.handlerDownloadFile(this.props.currentFile, this.props.files)}}>\n\t\t\t\t<Icon type='download' /> Descargar Archivo\n\t\t\t</Menu.Item>\n\t\t\t<Menu.Divider />\n\t\t\t<Menu.Item key='saveInDB' onClick={(e)=>{this.props.handlerSaveInDB(this.props.currentFile, this.props.files);}}>\n\t\t\t\t<Icon type='database' /> Guardar actual en Base de datos\n\t\t\t</Menu.Item>\n\t\t\t<Menu.Item key='saveAllInDB' onClick={(e)=>{this.props.handlerSaveAllInDB(this.props.files);}}>\n\t\t\t\t<Icon type='database' /> Guardar todos en Base de datos\n\t\t\t</Menu.Item>\n\t\t</Menu>);\n\t}\n\tMenuEdit(){\n\t\treturn(<Menu theme='light'>\n\t\t\t<Menu.Item key='undo'>Deshacer</Menu.Item>\n\t\t\t<Menu.Item key='redo'>Rehacer</Menu.Item>\n\t\t\t<Menu.Item key='cut'>Cortar</Menu.Item>\n\t\t\t<Menu.Item key='copy'>Copiar</Menu.Item>\n\t\t\t<Menu.Item key='paste'>Pegar</Menu.Item>\n\t\t</Menu>);\n\t}\n\tMenuSelection(){\n\t\treturn(<Menu theme='light'>\n\t\t\t<Menu.Item key='slc'>Seleccionar todo</Menu.Item>\n\t\t</Menu>);\n\t}\n\tMenuHelp(){\n\t\treturn(<Menu theme='light'>\n\t\t\t<Menu.Item key='docu'>Documentation</Menu.Item>\n\t\t\t<Menu.Item key='about'>Acerca de Editor de Arquetipos</Menu.Item>\n\t\t</Menu>);\n\t}\n\ttoggle() {\n\t\tthis.setState(state => ({ collapse: !state.collapse }));\n\t}\n\tcomponentWillMount(){\n\t\tthis.props.getArchetypes();\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Modal\n\t\t\t\t\ttitle='Abrir Archivo'\n\t\t\t\t\tcentered\n\t\t\t\t\tvisible={this.props.dialogOpenFile}\n\t\t\t\t\tonOk={() => this.props.handlerDialogOpenFile(false)}\n\t\t\t\t\tonCancel={() => this.props.handlerDialogOpenFile(false)}\n\t\t\t\t>\n\t\t\t\t\t<DropZone />\n\t\t\t\t</Modal>\n\t\t\t\t<Layout>\n\t\t\t\t\t<Row className='nav-bar'>\n\t\t\t\t\t\t<Icon type='fire' />\n\t\t\t\t\t\t<Dropdown overlay={ this.MenuFile } trigger={['click']}>\n\t\t\t\t\t\t\t<Button type= 'link' ghost>\n\t\t\t\t\t\t\t\tArchivo\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t\t<Dropdown overlay={ this.MenuEdit } trigger={['click']}>\n\t\t\t\t\t\t\t<Button type= 'link' ghost>\n\t\t\t\t\t\t\t\tEditar\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t\t<Dropdown overlay={ this.MenuSelection } trigger={['click']}>\n\t\t\t\t\t\t\t<Button type= 'link' ghost>\n\t\t\t\t\t\t\t\tSeleccion\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t\t<Dropdown overlay={ this.MenuHelp} trigger={['click']}>\n\t\t\t\t\t\t\t<Button type= 'link' ghost>\n\t\t\t\t\t\t\t\tAyuda\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t</Row>\n\t\t\t\t</Layout>\n\t\t\t\t<DragDropContext onDragEnd={this.onDragEnd}>\n\t\t\t\t\t<div>\n\t\t\t\t\t<Layout>\n\t\t\t\t\t\t<Sider collapsible onClick={this.toggle} style={{ minHeight: '100vh' }}>\n\t\t\t\t\t\t\t<Menu\n\t\t\t\t\t\t\t\ttheme= 'dark'\n\t\t\t\t\t\t\t\tmode='inline'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SubMenu\n\t\t\t\t\t\t\t\t\t\tkey='cap2'\n\t\t\t\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t<Icon type='folder' />\n\t\t\t\t\t\t\t\t\t\t\t<span>Arquetipos</span>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Menu.Item onClick={this.props.getArchetypes}>\n\t\t\t\t\t\t\t\t\t\t<Icon type='reload' /> Actualizar Lista\n\t\t\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.props.DBArchetypes.map((archetype, indx)=>(\n\t\t\t\t\t\t\t\t\t\t\t<Menu.Item key={ indx } onClick={(e)=>{this.props.handlerDBArchetypeClick(e, this.props.DBArchetypes);}}>{archetype.archetype_id.value}</Menu.Item>\n\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t\t<SubMenu\n\t\t\t\t\t\t\t\t\tkey='Blocks'\n\t\t\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t<Icon type='block' />\n\t\t\t\t\t\t\t\t\t\t<span>Bloques</span>\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Droppable droppableId='Lista0'>\n\t\t\t\t\t\t\t\t\t\t{(provided, snapshot) => (\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tref={provided.innerRef}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={getListStyle(snapshot.isDraggingOver)}>\n\t\t\t\t\t\t\t\t\t\t\t\t{this.props.sampleList.lista.map((item, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Draggable key={`list1-${item.id}`} draggableId={item.id} index={index}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{(provided, snapshot) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tref={provided.innerRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{...provided.draggableProps}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{...provided.dragHandleProps}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={getItemStyle(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsnapshot.isDragging,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprovided.draggableProps.style\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.content}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t{provided.placeholder}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</Droppable>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</SubMenu>\n\t\t\t\t\t\t\t</Menu>\n\t\t\t\t\t\t</Sider>\n\t\t\t\t\t\t<Layout>\n\t\t\t\t\t\t\t<Content>\n\t\t\t\t\t\t\t\t<FileManager>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</FileManager>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</Content>\n\t\t\t\t\t\t\t<Footer style={{ textAlign: 'center' }}>\n\t\t\t\t\t\t\t\tArchetypes Â©2019 Created by WorkOrWate\n\t\t\t\t\t\t\t</Footer>\n\t\t\t\t\t\t</Layout>\n\t\t\t\t\t</Layout>\n\t\t\t\t\t</div>\n\t\t\t\t</DragDropContext>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\ttitle: state.title,\n\t\tdialogOpenFile: state.dialogOpenFile,\n\t\tcurrentFile: state.currentFile,\n\t\tfiles: state.files,\n\t\tDBArchetypes: state.DBArchetypes,\n\t\tsampleList:state.sampleList\n\t};\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\thandlerAdd(){\n\t\t\tdispatch(onEdit('add'));\n\t\t},\n\t\thandlerChangeTitle(newtitle) {\n\t\t\tdispatch(changeTitle(newtitle));\n\t\t},\n\t\thandlerDialogOpenFile(modalState) {\n\t\t\tdispatch(toggleOpenFileDialog(modalState));\n\t\t},\n\t\thandlerDownloadFile(file, files) {\n\t\t\thandlerDownload(dispatch, file, files)\n\t\t},\n\t\thandlerSaveInDB(file, files){\n\t\t\tconst fileTarget = files.filter(ofile => ofile.key === file)[0];\n\t\t\tif(navigator.onLine){\n\t\t\t\tif(fileTarget._id === '') {\n\t\t\t\t\taxios.post('http://localhost:4000/api/archetype/', fileTarget.content, {\n\t\t\t\t\t\theaders: {'Access-Control-Allow-Origin': '*'}\n\t\t\t\t\t})\n\t\t\t\t\t.then(response => {\n\t\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t\t\tif(response.data.success){\n\t\t\t\t\t\t\tfileTarget._id = response.data._id;\n\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\ttype: 'updateFile',\n\t\t\t\t\t\t\t\tfile: fileTarget\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tfeedBackMessage({ type: 'success', msg: 'El arquetipo se ha subido correctamente.'});\n\t\t\t\t\t\t\tthis.getArchetypes();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Ya existe un arquetipo con ese nombre, por favor trabaja con el arquetipo encontrandolo en la lista.'});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t})\n\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar guardar el arquetipo, comprueba tu conexiÃ³n a internet.'});\n\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t});\n\t\t\t\t} else if (fileTarget._id !== '') {\n\t\t\t\t\taxios.put('http://localhost:4000/api/archetype/', { _id : fileTarget._id, data: fileTarget.content})\n\t\t\t\t\t.then(response => {\n\t\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t\t\tfeedBackMessage({ type: 'success', msg: 'El arquetipo se ha actualizado correctamente.'});\n\t\t\t\t\t\tthis.getArchetypes();\n\t\t\t\t\t})\n\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar guardar el arquetipo, comprueba tu conexiÃ³n a internet.'});\n\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Al parecer no tienes conexiÃ³n a internet.'});\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t},\n\t\thandlerSaveAllInDB(files){\n\t\t\tfiles.map((file,  indx)=>{\n\t\t\t\tif(navigator.onLine){\n\t\t\t\t\tif(file._id === '') {\n\t\t\t\t\t\taxios.post('http://localhost:4000/api/archetype/', file.content, {\n\t\t\t\t\t\t\theaders: {'Access-Control-Allow-Origin': '*'}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(response => {\n\t\t\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t\t\t\tif(response.data.success){\n\t\t\t\t\t\t\t\tfile._id = response.data._id;\n\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\ttype: 'updateFile',\n\t\t\t\t\t\t\t\t\tfile\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tfeedBackMessage({ type: 'success', msg: 'El arquetipo se ha subido correctamente.'});\n\t\t\t\t\t\t\t\tthis.getArchetypes();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Ya existe un arquetipo con ese nombre, por favor trabaja con el arquetipo encontrandolo en la lista.'});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar guardar el arquetipo, comprueba tu conexiÃ³n a internet.'});\n\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (file._id !== '') {\n\t\t\t\t\t\taxios.put('http://localhost:4000/api/archetype/', { _id : file._id, data: file.content})\n\t\t\t\t\t\t.then(response => {\n\t\t\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t\t\t\tfeedBackMessage({ type: 'success', msg: 'El arquetipo se ha actualizado correctamente.'});\n\t\t\t\t\t\t\tthis.getArchetypes();\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar guardar el arquetipo, comprueba tu conexiÃ³n a internet.'});\n\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Al parecer no tienes conexiÃ³n a internet.'});\n\t\t\t\t}\n\n\t\t\t});\n\t\t},\n\t\tgetArchetypes(){\n\t\t\tif(navigator.onLine){\n\t\t\t\treturn axios.get('http://localhost:4000/api/archetype/', {\n\t\t\t\t\theaders: {'Access-Control-Allow-Origin': '*'}\n\t\t\t\t})\n\t\t\t\t.then(response => {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'updateDBArchetypesVariable',\n\t\t\t\t\t\tDBArchetypes: response.data\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Ha ocurrido un error al intentar contactar al servidor, comprueba tu conexiÃ³n a internet.'});\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tfeedBackMessage({ type: 'error', msg: 'Al parecer no tienes conexiÃ³n a internet.'});\n\t\t\t}\n\t\t},\n\t\thandlerDBArchetypeClick(e, DBArchetypes){\n\t\t\tdispatch(openDbArchetype(DBArchetypes[parseInt(e.key)]));\n\t\t},\n\t\thandlerUpdateList(blocklist){\n\t\t\tdispatch(updateblocklist(blocklist));\n\t\t}\n\t\t\n\t}\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);";

const tablahandlerAddFiles = [
    {
      key: '1',
      parametro: 'aFiles',
      descripcion: 'Arreglo de objetos json con los datos de cada archivo seleccionado para cargar.',
      tipo: 'Array',
    },
    {
      key: '2',
      parametro: 'newTabIndex',
      descripcion: 'El contador actual para agregar la Key al archivo nuevo (abierto o creado).',
      tipo: 'NÃºmero',
    },
    {
      key: '3',
      parametro: 'files',
      descripcion: 'El arreglo que contiene los archivos en uso.',
      tipo: 'Array',
    },
    {
      key: '4',
      parametro: 'ref',
      descripcion: 'Referencia React al <input />.',
      tipo: 'Referencia React',
    }
];
export const Homepage2 = {
    "title": "Pagina de Inicio",
    "content": (
        <div>
            <Title level={2}>El componenete "Home.js".</Title>
            <SyntaxHighlighter language="javascript" style={docco}>
                    <Paragraph copyable>
                        {
                            codeString
                        }
                    </Paragraph>
                </SyntaxHighlighter>
            
            <Title level={4}>La funciÃ³n "toggle" .</Title>
            <p>
              Esta funciÃ³n se encarga de expandir el contenido de los Sub Menu".
            </p>
            <Title level={4}>Las funcines "Menu" .</Title>
            <p>
              Estas funciones son las que contienen nuestros menus de archivos, con las que podremos abrir, cargar, guardar, etc".
            </p>
            
            
        </div>
        )
}